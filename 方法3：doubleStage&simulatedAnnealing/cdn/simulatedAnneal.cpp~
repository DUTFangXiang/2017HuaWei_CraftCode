/*****************
FX 2017.3.26  花费时间的测量

在计算当前服务器的最小费用最大流之前，花费几乎为0
sumCur = minCostMaxFlow(gh, existNode);
在之后，重新加载文件数据也几乎不花费时间
ReadGraph(gh, "case6.txt");
目前起始三个点大概遍历1000次
********************/
#include<set>
#include<iterator>
#include"cdn.h"

#define SIMULATE 10000
using namespace std;


/*
@ 模拟退火算法核心
@ gh构建的图模型，t模拟退火的初始温度，
@ at退火的速率，N 最小可接受服务器个数
*/
void simulatedAnneal(SparseGraph &gh, int iterTime1, int iterTime2, float RANDX, float RANDY, float RANDZ, float at)
{
    float  randX;
    long   sumCur;         //当前计算的总价格
    set<int> existNode;    //当前选择的服务器
    set<int> notWantedNode;//除服务器之外其他网络节点
    set<int> copyExistNode;//拷贝当前服务器，退火失败返回上一次服务器状态
    int    count = 0;      //迭代统计
    double totalTime=0;    //花费时间
    bool   isInitial = true;//是否进入下一状态的标志
    int    consumeNodeNum = gh.consumeNodeNum;
    //初始计算的总价格，服务器布置与消费节点相连接的地方
    long sumPre = consumeNodeNum*gh.serverCost;
    long sumChange = MAXCOST;
    long sumMin    = MAXCOST;
    double t = 50;     //0.5*consumeNodeNum*gh.serverCost; //初始温度0.5
    //真正网络节点个数
    int networkNodeNum = gh.networkNodeNum-2;
    gh.GetmaxLinkedNode(); //求链路最多的节点
    //根据出度设置服务器节点被选中的概率
    float weight[1000]={0.0};
    for (int i = 0; i < consumeNodeNum; i++)
    {
	existNode.push_back(gh.f[i].linkedNodeID);
	weight[gh.f[i].linkedNodeID] = 0.7; //跟消费节点相连接的网络节点被减去的权重很大
    }
    for (int i = 0;i<networkNodeNum;i++)
    {
 	if(weight[i]<0.00001)
	{
	    if(gh.g[i].size()<=1)
	 	weight[i] = 1;
	    else //根据出度，将非消费节点相连接的网络节点的权重设置到0-0.7之间,出度越大被加入的概率越大
		weight[i] = 0.3*((float)(gh.maxLinkedNode - gh.g[i].size()))/ (gh.maxLinkedNode-2.0)+ 0.3; 
	}
    } 
  //初始服务器布置在与消费节点相连接的网络节点
    for (int i = 0; i < consumeNodeNum; i++)
	existNode.insert(gh.f[i].linkedNodeID);
    srand((unsigned)time(NULL));	
    while (1)
    {	
    	if(isInitial && count >= iterTime1)
   	{
        	count = 0;
        	isInitial = false;	//大于设定值就进入下一个状态，并且重新计时
   	}
	//增加还是减少前先保留当前节点，防止不是朝退火方向而返回
	copyExistNode = existNode;  
        //产生随机数
	randX = (float) rand()/ RAND_MAX;
	//搜索初始状态
	if(isInitial && count <= iterTime1){
		//随机减一个服务器节点
		if(randX < RANDX)  
	    		reduceOneServer(existNode);	
		//替换一个服务器节点
		else                
		{
	    		getRemainNode(gh.f, existNode, notWantedNode);	 
	    		addOneServer(existNode, notWantedNode);
	    		reduceOneServer(existNode);

		}
	} 
	else if(!isInitial && count < iterTime2) //  
	{
//printf("****second****\n");
		t = t*at; //更新温度
		if(randX < RANDY)
		{
			reduceOneServer(existNode,weight);
		} 
		else if(randX< RANDZ)
		{
			getRemainNode(networkNodeNum, existNode, notWantedNode);	 
	    		addOneServer(existNode, notWantedNode,weight);
		} 
		else
		{
			getRemainNode(networkNodeNum, existNode, notWantedNode);	 
	    		addOneServer(existNode, notWantedNode,weight);
			reduceOneServer(existNode,weight);
	 	} 
	}
	else
	    break;
	//最小费用流
	for (set<int>::iterator it = existNode.begin(); it != existNode.end();it++)
    		gh.g[gh.V() - 1].push_back(new Edge(gh.V()-1, *it, MAXVALUE, 0));	
	sumCur = minCostMaxFlow(gh, existNode);	
	double df = sumCur - sumPre;
	//接受当前结果
	if (df < 0)
	{
    		sumPre = sumCur;          //更新最小结果
		if(sumMin > sumPre)
		{
//printf("totalTime:%f,sumPre:%d\n",totalTime,sumPre);
			sumMin = sumPre;
	    		gh.serverRel.clear();
	    		gh.serverRel = existNode; //接受当前服务器布局结果
	    		for (size_t i = 0; i < gh.gRel.size(); i++)
				gh.gRel[i].clear();
	    		for (size_t i = 0; i < networkNodeNum; i++)
	    		{
	      			for (size_t j = 0; j < gh.g[i].size(); j++)
		  			gh.gRel[i].push_back({gh.g[i][j]->w(),gh.g[i][j]->rem_f,gh.g[i][j]->cur_cost});
	    		}
		}
	}
	//以一定概率接受当前状态 
	else if(!isInitial&&(exp(-df/t) > ((double) rand()/ RAND_MAX)) && sumCur != MAXCOST) //
		sumPre = sumCur;
	//不接受这次的状态
	else 
    		existNode = copyExistNode;
        //设置时间
	totalTime = ((double)(clock() - start) / CLOCKS_PER_SEC);
	if (totalTime > 88)
	    break;
        //测量最终结果不变化多少次数了
	if(sumChange == sumMin)
	    count++;
	else
	    count = 0;
	sumChange = sumMin;
        //恢复图结构重新搜索
	gh.recover();
    }
   printf("\ntime: %lf\n",totalTime);
   printf("\ntotal cost: %ld\n",sumMin);
}

